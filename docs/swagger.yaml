basePath: /api
definitions:
  admin.Admin:
    properties:
      _id:
        type: string
      address:
        type: string
      createdAt:
        type: string
      dateOfBirth:
        type: string
      emailId:
        type: string
      emailVerificationStatus:
        type: boolean
      firstName:
        type: string
      gender:
        type: string
      isDeleted:
        type: boolean
      lastName:
        type: string
      mobile:
        type: string
      password:
        type: string
      photo:
        type: string
      status:
        type: boolean
      updatedAt:
        type: string
      userName:
        type: string
      verificationToken:
        type: string
      verificationTokenCreationTime:
        type: string
      website:
        type: string
    type: object
  admin.AdminCreateRequest:
    properties:
      emailId:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      mobile:
        type: string
      password:
        type: string
      userName:
        type: string
    type: object
host: localhost:5000
info:
  contact:
    email: support@gouniadmin.com
    name: API Support
  description: Admin panel API for Go Uni Admin
  license:
    name: MIT
  termsOfService: http://swagger.io/terms/
  title: Go Uni Admin API
  version: "1.0"
paths:
  /admins:
    get:
      description: Retrieves a list of all non-deleted admins
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/admin.Admin'
            type: array
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List all admins
      tags:
      - admins
    post:
      consumes:
      - application/json
      description: Creates a new admin with hashed password
      parameters:
      - description: Admin data
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/admin.AdminCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/admin.Admin'
        "400":
          description: 'error: Invalid request body or validation error'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Failed to hash password'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new admin
      tags:
      - admins
  /admins/{id}:
    delete:
      description: Soft deletes an admin by ID
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: 'error: Invalid ID'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Admin not found'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete an admin
      tags:
      - admins
    get:
      description: Retrieves an admin by their UUID
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.Admin'
        "400":
          description: 'error: Invalid ID'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Admin not found'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get an admin by ID
      tags:
      - admins
    put:
      consumes:
      - application/json
      description: Updates an existing admin by ID
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated admin data
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/admin.Admin'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.Admin'
        "400":
          description: 'error: Invalid ID or request body'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Admin not found'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update an admin
      tags:
      - admins
  /admins/login:
    post:
      consumes:
      - application/json
      description: Authenticates an admin and returns a JWT token
      parameters:
      - description: Login credentials (only emailId and password)
        in: body
        name: login
        required: true
        schema:
          properties:
            emailId:
              type: string
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: Invalid request body'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Invalid email or password'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Failed to generate token'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Admin login
      tags:
      - admins
  /admins/profile:
    get:
      description: Retrieves the profile of the authenticated admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin.Admin'
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Admin not found'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get admin profile
      tags:
      - admins
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
